pipeline {
    agent any
    
    triggers {
        cron('H H * * *')
    }

    options {
        // Configure shallow clone
        skipDefaultCheckout(true)
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: scm.branches,
                    extensions: [
                        [$class: 'CloneOption', depth: 1, noTags: false, shallow: true, reference: '']
                    ],
                    userRemoteConfigs: scm.userRemoteConfigs
                ])
            }
        }

        stage('Glucose Minimal') {
            steps {
                sh '''
                TIMEOUT='15h'
                code=0
                timeout $TIMEOUT sh runscripts/jenkins/workflow.sh runscripts/jenkins/configs/ecoli-glucose-minimal.json || code=$?
                [ $code -eq 124 ] && echo "Jenkins job timeout after $TIMEOUT"
                exit $code
                '''
            }
        }
    }
    
    post {        
        success {
            if (hasStatusChanged()) {
                slackSend(
                    color: 'good',
                    channel: '#jenkins',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER} back to normal after ${currentBuild.durationString} (<${env.BUILD_URL}|link>)"
                )
            } else {
                echo "Job was successful just like last run, not sending Slack notification."
            }
        }
        
        failure {
            if (hasStatusChanged()) {
                slackSend(
                    color: 'danger',
                    channel: '#jenkins',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER} failed after ${currentBuild.durationString} (<${env.BUILD_URL}|link>)"
                )
            } else {
                slackSend(
                    color: 'danger',
                    channel: '#jenkins',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER} is still failing after ${currentBuild.durationString} (<${env.BUILD_URL}|link>)"
                )
            }
        }
        
        aborted {
            if (hasStatusChanged()) {
                slackSend(
                    color: '#808080',
                    channel: '#jenkins',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER} aborted after ${currentBuild.durationString} (<${env.BUILD_URL}|link>)"
                )
            } else {
                slackSend(
                    color: '#808080',
                    channel: '#jenkins',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER} aborted again after ${currentBuild.durationString} (<${env.BUILD_URL}|link>)"
                )
            }
        }

        unstable {
            if (hasStatusChanged()) {
                slackSend(
                    color: 'warning',
                    channel: '#jenkins',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER} unstable after ${currentBuild.durationString} (<${env.BUILD_URL}|link>)"
                )
            } else {
                slackSend(
                    color: 'warning',
                    channel: '#jenkins',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER} is still unstable after ${currentBuild.durationString} (<${env.BUILD_URL}|link>)"
                )
            }
        }

        cleanup {
            cleanWs()
        }
    }
}

def hasStatusChanged() {
    if (currentBuild.previousBuild == null) {
        return true
    }
    
    def previousResult = currentBuild.previousBuild.result
    def currentResult = currentBuild.currentResult
    
    return previousResult != currentResult
}
